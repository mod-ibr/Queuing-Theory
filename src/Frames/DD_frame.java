/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import queuesystemproj.Deterministic.*;
import static queuesystemproj.QueueSystemProj.homePage_Frame;
import queuesystemproj.statusFlags.FlagStates;

/**
 *
 * @author 20114
 */
public class DD_frame extends javax.swing.JFrame {

    private final int TIME = 0;
    private final int RATE = 1;
    private final int N = 1;
    private final int LAMPDA = 0;
    private final int MU = 1;
    private final int GET_N_AT_T = 0;
    private final int GET_WAITING_OF_N = 1;
    private final int IDLE = 0;
    private final int ERROR_DETECTED = 1;

    private int lampdaCaseTimeRate;
    private int muCaseTimeRate;
    private int operandCaseTimeN;
    private int systemCapacity;
    private int initialMemberInSystem;

    private float lampdaValue;
    private float muValue;
    private int operandValue;
    private int nTimeChoice;
    private int lengthOfPlotSegments;

    private int Greater = LAMPDA;
    private DD1K_abstract DD1K_Model_obj;
    private FlagStates flagStatus = new FlagStates();

    /**
     * Creates new form MM_frame
     */
    public DD_frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_DD1ooFCFS = new javax.swing.JPanel();
        btn_calculate = new javax.swing.JButton();
        txt_lampda = new javax.swing.JTextField();
        txt_mu = new javax.swing.JTextField();
        lbl_lampda = new javax.swing.JLabel();
        lbl_mu = new javax.swing.JLabel();
        lbl_time = new javax.swing.JLabel();
        txt_waitingResult = new javax.swing.JTextField();
        lbl_Title = new javax.swing.JLabel();
        lbl_waitingOfCustomerN = new javax.swing.JLabel();
        cmpbx_tn = new javax.swing.JComboBox<>();
        txt_NumberOfCustomerResult = new javax.swing.JTextField();
        lbl_nOfCoustomersAtTimeN1 = new javax.swing.JLabel();
        cmpbx_mu = new javax.swing.JComboBox<>();
        cmpbx_lampda = new javax.swing.JComboBox<>();
        txt_k = new javax.swing.JTextField();
        ldl_K = new javax.swing.JLabel();
        txt_M = new javax.swing.JFormattedTextField();
        lbl_M = new javax.swing.JLabel();
        txt_ntime = new javax.swing.JFormattedTextField();
        btn_backToHomePage = new javax.swing.JButton();
        lbl_lengthOfPlotSegments = new javax.swing.JLabel();
        txt_lengthOfPlotSegments = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DD_Frame");
        setBackground(new java.awt.Color(255, 102, 102));
        setName("frm_DD"); // NOI18N

        btn_calculate.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btn_calculate.setForeground(new java.awt.Color(0, 0, 204));
        btn_calculate.setText("Calculate");
        btn_calculate.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btn_calculate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calculateActionPerformed(evt);
            }
        });

        txt_lampda.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txt_mu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_mu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_muActionPerformed(evt);
            }
        });

        lbl_lampda.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbl_lampda.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_lampda.setText("Lampda(ArrivalTime/Rate)");

        lbl_mu.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbl_mu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_mu.setText("mu(ServiceTime/Rate)");

        lbl_time.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbl_time.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_time.setText("Time or Customer n");

        txt_waitingResult.setEditable(false);
        txt_waitingResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txt_waitingResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lbl_Title.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        lbl_Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_Title.setText("D/D/1/(K-1)/FCFS");

        lbl_waitingOfCustomerN.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_waitingOfCustomerN.setForeground(new java.awt.Color(102, 102, 255));
        lbl_waitingOfCustomerN.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_waitingOfCustomerN.setText("Waiting Time for customer N");

        cmpbx_tn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmpbx_tn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Time", "N" }));

        txt_NumberOfCustomerResult.setEditable(false);
        txt_NumberOfCustomerResult.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txt_NumberOfCustomerResult.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_NumberOfCustomerResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_NumberOfCustomerResultActionPerformed(evt);
            }
        });

        lbl_nOfCoustomersAtTimeN1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_nOfCoustomersAtTimeN1.setForeground(new java.awt.Color(102, 102, 255));
        lbl_nOfCoustomersAtTimeN1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_nOfCoustomersAtTimeN1.setText("Number of Customers at Time");

        cmpbx_mu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmpbx_mu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Time", "Rate" }));

        cmpbx_lampda.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmpbx_lampda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Time", "Rate" }));

        txt_k.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        ldl_K.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ldl_K.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ldl_K.setText("Queue Size");

        txt_M.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        txt_M.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lbl_M.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_M.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_M.setText("Initial Members");

        txt_ntime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        txt_ntime.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btn_backToHomePage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btn_backToHomePage.setText("Back to Home Page");
        btn_backToHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backToHomePageActionPerformed(evt);
            }
        });

        lbl_lengthOfPlotSegments.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbl_lengthOfPlotSegments.setText("Number Of Plot Segments");

        txt_lengthOfPlotSegments.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        txt_lengthOfPlotSegments.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_lengthOfPlotSegments.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout pnl_DD1ooFCFSLayout = new javax.swing.GroupLayout(pnl_DD1ooFCFS);
        pnl_DD1ooFCFS.setLayout(pnl_DD1ooFCFSLayout);
        pnl_DD1ooFCFSLayout.setHorizontalGroup(
            pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_DD1ooFCFSLayout.createSequentialGroup()
                .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_Title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnl_DD1ooFCFSLayout.createSequentialGroup()
                        .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_lampda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnl_DD1ooFCFSLayout.createSequentialGroup()
                                .addComponent(cmpbx_lampda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_lampda)))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnl_DD1ooFCFSLayout.createSequentialGroup()
                                .addComponent(cmpbx_mu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txt_mu, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbl_mu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_DD1ooFCFSLayout.createSequentialGroup()
                                .addComponent(cmpbx_tn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txt_ntime, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbl_time, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnl_DD1ooFCFSLayout.createSequentialGroup()
                        .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txt_waitingResult, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_waitingOfCustomerN, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_NumberOfCustomerResult)
                            .addComponent(lbl_nOfCoustomersAtTimeN1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_DD1ooFCFSLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_DD1ooFCFSLayout.createSequentialGroup()
                        .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lbl_lengthOfPlotSegments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_lengthOfPlotSegments))
                        .addGap(117, 117, 117)
                        .addComponent(btn_calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btn_backToHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(144, 144, 144))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_DD1ooFCFSLayout.createSequentialGroup()
                        .addComponent(ldl_K, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_k, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(lbl_M, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_M, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(254, 254, 254))))
        );
        pnl_DD1ooFCFSLayout.setVerticalGroup(
            pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_DD1ooFCFSLayout.createSequentialGroup()
                .addComponent(lbl_Title, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_DD1ooFCFSLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_k, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ldl_K)
                            .addComponent(txt_M, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_M))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_lampda)
                            .addComponent(lbl_mu)
                            .addComponent(lbl_time))
                        .addGap(27, 27, 27)
                        .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_lampda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_mu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmpbx_tn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmpbx_mu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmpbx_lampda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_ntime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 36, Short.MAX_VALUE)
                        .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_DD1ooFCFSLayout.createSequentialGroup()
                                .addComponent(lbl_waitingOfCustomerN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addComponent(txt_waitingResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnl_DD1ooFCFSLayout.createSequentialGroup()
                                .addComponent(lbl_nOfCoustomersAtTimeN1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txt_NumberOfCustomerResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addGroup(pnl_DD1ooFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_calculate, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(btn_backToHomePage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_DD1ooFCFSLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_lengthOfPlotSegments, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(txt_lengthOfPlotSegments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnl_DD1ooFCFS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnl_DD1ooFCFS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calculateActionPerformed
        //Either Rate(N) or Time 
        readComboBoxes();
        //Check inputs 
        if (validation() == IDLE) {
            System.out.println("All is Well...");
            //Make a decision path
            System.out.println("Generate Greater value");
            //preparing inputs to a single form to be assigned to the model object 
            preparingParameters();
            Greater = (lampdaValue > muValue) ? (LAMPDA) : (MU);

            //Creating the Suitable Object
            if (creatingModelObject() == IDLE) {
                //Calculate the values needed to be presented
                showValues();

            } else {
                System.out.println("Error In InitialMembers");
                JOptionPane.showMessageDialog(this, flagStatus.getMSGErrorStates(), "Error MSG", JOptionPane.ERROR_MESSAGE);
            }
        } else if (validation() == ERROR_DETECTED) {
            JOptionPane.showMessageDialog(this, flagStatus.getMSGErrorStates(), "Error MSG", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btn_calculateActionPerformed

    private void txt_muActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_muActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_muActionPerformed

    private void txt_NumberOfCustomerResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_NumberOfCustomerResultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_NumberOfCustomerResultActionPerformed

    private void btn_backToHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backToHomePageActionPerformed
        // TODO add your handling code here:
        homePage_Frame.setVisible(true);
        DD_frame.this.setVisible(false);

    }//GEN-LAST:event_btn_backToHomePageActionPerformed

    private void readComboBoxes() {
        System.out.println("@ readComboBoxes");
        lampdaCaseTimeRate = (this.cmpbx_lampda.getSelectedItem() == "Time") ? (TIME) : (RATE);
        muCaseTimeRate = (this.cmpbx_mu.getSelectedItem() == "Time") ? (TIME) : (RATE);
        operandCaseTimeN = (this.cmpbx_tn.getSelectedItem() == "Time") ? (TIME) : (N);
        System.out.println("lampdaCaseTimeRate :" + ((lampdaCaseTimeRate == 0) ? ("Time") : ("Rate")));
        System.out.println("muCaseTimeRate :" + ((muCaseTimeRate == 0) ? ("Time") : ("Rate")));
        System.out.println("operandCaseTimeN :" + ((operandCaseTimeN == 0) ? ("Time") : ("Rate")));
    }

    private int validation() {
        System.out.println("@ validation");
        System.out.println("Reset FlagStatus");
        flagStatus.resetState();
        //Lampda Validation
        if (Pattern.matches("[0-9]*[\\./]?[0-9]+", txt_lampda.getText())) {
            lampdaValue = Float.parseFloat(txt_lampda.getText());
            System.out.println("Pure lampda calculated = " + lampdaValue);
        } else {
            System.out.println("invaled lampda ");
            flagStatus.setLampdaError();
        }

        //Mu Validation
        if (Pattern.matches("[0-9]*[\\./]?[0-9]+", txt_mu.getText())) {
            muValue = Float.parseFloat(txt_mu.getText());
            System.out.println("Pure mu calculated = " + muValue);
        } else {
            System.out.println("invaled mu ");
            flagStatus.setMuError();
        }

        //ntime Validation
        if (Pattern.matches("[0-9]+", txt_ntime.getText())) {
            operandValue = Integer.parseInt(txt_ntime.getText());
            System.out.println("Pure operand calculated = " + operandValue);
        } else {
            System.out.println("invaled nTime ");
            if (operandCaseTimeN == TIME) {
                flagStatus.setTimeError();
            } else if (operandCaseTimeN == N) {
                flagStatus.setCustomerNumberError();
            }
        }

        //K Validation
        if (Pattern.matches("[1-9][0-9]*", txt_k.getText())) {
            systemCapacity = Integer.parseInt(txt_k.getText());
            System.out.println("Pure K calculated = " + systemCapacity);
        } else {
            System.out.println("invaled K ");
            flagStatus.setQueueMaxMemberError();
        }
        //lengthOfPlotSegments Validation
        if (Pattern.matches("[1-9][0-9]*", txt_lengthOfPlotSegments.getText())) {
            lengthOfPlotSegments = Integer.parseInt(txt_lengthOfPlotSegments.getText());
            System.out.println("Pure Number Of Plot Segments calculated = " + lengthOfPlotSegments);
        } else {
            System.out.println("invaled Number Of Plot Segments");
            flagStatus.setLengthOfPlotSegmentsError();
        }
        return (flagStatus.getMSGErrorStates().equals("Clear") ? (IDLE) : (ERROR_DETECTED));
    }

    private int creatingModelObject() {

        /**
         * According to the Greater of Lampda or Mu the Object will be Created.
         */
        System.out.println("@ creatingModelObject");
        // Creating the suitable object  
        if (Greater == LAMPDA) {
            System.out.println("Lampda is Greater D/D/1/K-1  model will be created");
            DD1K_Model_obj = new DD1K_LampdaGreater(lampdaValue, muValue, systemCapacity, lengthOfPlotSegments);
            System.out.println("L : " + DD1K_Model_obj.getLampda());
            System.out.println("M : " + DD1K_Model_obj.getMu());
            System.out.println("K : " + DD1K_Model_obj.getK());
            System.out.println("NumOFCust : " + DD1K_Model_obj.calculateCustomersAtTimeT(operandValue));
            JOptionPane.showMessageDialog(this, "The Initial Members (M) Will be Ignored ", "Info MSG", JOptionPane.INFORMATION_MESSAGE);

        } else if (Greater == MU) {
            System.out.println("Mu is Greater D/D/1/K  model will be created");
            System.out.println("Need to get the initial Members in System");
            //Validation initialMemberInSystem
            if (Pattern.matches("[0-9]+", txt_M.getText())) {
                initialMemberInSystem = Integer.parseInt(txt_M.getText());
                System.out.println("Pure M calculated = " + initialMemberInSystem);
                //Object is created and parameters are assigned
                DD1K_Model_obj = new DD1K_MuGreater(lampdaValue, muValue, systemCapacity, initialMemberInSystem, lengthOfPlotSegments);
            } else {
                System.out.println("invaled M ");
                flagStatus.setInitialMemberError();
                return ERROR_DETECTED;
            }
        }
        return IDLE;
    }

    private void preparingParameters() {
        System.out.println("@ preparingParameters");

        /**
         * Since the model designed to accept Rates So any rate value will
         * assigned directly Else will be converted into Rate.
         *
         */
        switch (lampdaCaseTimeRate) {
            case TIME: {
                //Need to be converted into Rate value
                System.out.println("In Time Lampda case ");
                lampdaValue = (float) 1 / lampdaValue;

            }
            break;
            case RATE: {
                //No need to conversion
                System.out.println("In Rate Lampda case ");
                lampdaValue = lampdaValue;
            }
            break;
        }

        switch (muCaseTimeRate) {
            case TIME: {
                //Need to be converted into Rate value
                System.out.println("In Time Mu case ");
                muValue = (float) 1 / muValue;
            }
            break;
            case RATE: {
                //No need to conversion
                System.out.println("In Rate Mu case ");
                muValue = muValue;
            }
            break;
        }
        /**
         * operandCaseTimeN is a special case operandCaseTimeN is designed to
         * take a decision to get Number of customers at time (or) to get the
         * waiting time for customer N.
         */
        switch (operandCaseTimeN) {
            case TIME: {
                /**
                 * Time is given the out will be the number of customer at this
                 * time.
                 */
                System.out.println("In Time operandCaseTimeN case : Get the No. of Customer @ T ");
                nTimeChoice = GET_N_AT_T;
            }
            break;
            case N: {
                /**
                 * Customer Number is given the out will be the Waiting time for
                 * this Customer.
                 */
                System.out.println("In N operandCaseTimeN case : Get the waithing time of Customer No. N ");
                nTimeChoice = GET_WAITING_OF_N;
            }
            break;
        }
    }

    private void showValues() {

        if (operandCaseTimeN == TIME) {
            txt_NumberOfCustomerResult.setText(Integer.toString(DD1K_Model_obj.calculateCustomersAtTimeT(operandValue)));
            System.out.println("lambda In D : " + DD1K_Model_obj.getLampda() + " , Mu In D : " + DD1K_Model_obj.getMu());

            txt_waitingResult.setText(" ");
        } else if (operandCaseTimeN == N) {
            txt_NumberOfCustomerResult.setText(" ");
            txt_waitingResult.setText(Float.toString(DD1K_Model_obj.calculateWaitingTimeAtCustomerN(operandValue)));
        }
        //Chart Part
        XYStepChartExample example = new XYStepChartExample("L>M", DD1K_Model_obj);
        System.out.println(" ==>> lambda : " + DD1K_Model_obj.getLampda() + " , Mu : " + DD1K_Model_obj.getMu() + "NumOfCust = " + DD1K_Model_obj.calculateCustomersAtTimeT(operandValue));
        example.setSize(800, 400);
        example.setLocationRelativeTo(null);
        example.setVisible(true); 
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DD_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DD_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DD_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DD_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DD_frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_backToHomePage;
    private javax.swing.JButton btn_calculate;
    private javax.swing.JComboBox<String> cmpbx_lampda;
    private javax.swing.JComboBox<String> cmpbx_mu;
    private javax.swing.JComboBox<String> cmpbx_tn;
    private javax.swing.JLabel lbl_M;
    private javax.swing.JLabel lbl_Title;
    private javax.swing.JLabel lbl_lampda;
    private javax.swing.JLabel lbl_lengthOfPlotSegments;
    private javax.swing.JLabel lbl_mu;
    private javax.swing.JLabel lbl_nOfCoustomersAtTimeN1;
    private javax.swing.JLabel lbl_time;
    private javax.swing.JLabel lbl_waitingOfCustomerN;
    private javax.swing.JLabel ldl_K;
    private javax.swing.JPanel pnl_DD1ooFCFS;
    private javax.swing.JFormattedTextField txt_M;
    private javax.swing.JTextField txt_NumberOfCustomerResult;
    private javax.swing.JTextField txt_k;
    private javax.swing.JTextField txt_lampda;
    private javax.swing.JFormattedTextField txt_lengthOfPlotSegments;
    private javax.swing.JTextField txt_mu;
    private javax.swing.JFormattedTextField txt_ntime;
    private javax.swing.JTextField txt_waitingResult;
    // End of variables declaration//GEN-END:variables
}
